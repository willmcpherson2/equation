true x y = x;
false x y = y;

not x = x false true;
or x y = x true y;
and x y = x y false;

cons x xs c n = c x xs;
nil c n = n;

append x xs = xs (appendCons x) (appendNil x);
appendCons x y ys = cons y (append x ys);
appendNil x = cons x nil;

concat xs ys = xs (concatCons ys) (concatNil ys);
concatCons ys x xs = cons x (concat xs ys);
concatNil ys = ys;

map f xs = xs (mapCons f) (mapNil f);
mapCons f x xs = cons (f x) (map f xs);
mapNil f = nil;

fold f z xs = xs (foldCons f z) (foldNil z);
foldCons f z x xs = fold f (f z x) xs;
foldNil z = z;

loop = loop;

main = fold or false (cons true (cons loop nil));
